{"question_type":"market_reasoning","scenario":"A well-known cryptocurrency exchange has been hacked， with hackers successfully stealing crypto assets valued at $200 million","instructions":"Analyze the potential impact of this event on the entire cryptocurrency market","factors_to_consider":["Exchange reputation and market position","Types and amount of stolen assets","Exchange's response measures","Potential reactions from regulatory agencies"],"keywords":["Hacking attack","Market confidence","Security vulnerabilities","Regulatory scrutiny"],"expected_insights":["Major exchange security incidents typically trigger short-term market panic","The exchange's response measures are key to restoring market confidence","Such events may lead to stricter industry regulation","Analysis of how similar historical events impacted the market"],"scoring_criteria":[{"criterion":"Market impact analysis","points":4,"key_points":["Analyze the potential effect on short-term and long-term market sentiment","Evaluate the potential impact on prices of different types of crypto assets"]},{"criterion":"Security vulnerability assessment","points":3,"key_points":["Explore potential systemic security issues exposed by the attack","Discuss security measures that exchanges and users can implement"]},{"criterion":"Regulatory impact prediction","points":3,"key_points":["Predict possible reactions from regulatory agencies","Assess the potential impact of additional regulation on industry development"]}],"total_possible":10}
{"question_type":"vulnerability_analysis","scenario":"Researchers have discovered a serious security vulnerability in a popular smart contract wallet that could potentially allow attackers to extract user funds under specific conditions","instructions":"Analyze the scope of impact of this vulnerability and possible solutions","factors_to_consider":["Technical nature and triggering conditions of the vulnerability","Range of affected users","Reputation and past security record of the development team","Possible mitigation strategies"],"keywords":["Smart contract vulnerability","Security audit","Zero-day vulnerability","Hot update"],"expected_insights":["The severity of smart contract vulnerabilities depends on their exploitability and scope of impact","Different types of smart contract vulnerabilities require different fixing methods","Transparent vulnerability handling is crucial for maintaining user trust","Excellent crisis management can ultimately enhance project reputation"],"scoring_criteria":[{"criterion":"Technical analysis","points":3,"key_points":["Accurately describe the technical nature and potential impact of the vulnerability","Evaluate the likelihood and conditions for the vulnerability to be exploited"]},{"criterion":"Impact assessment","points":3,"key_points":["Estimate the range of affected users and potential losses","Analyze the vulnerability's impact on the related project's market value and reputation"]},{"criterion":"Solutions","points":4,"key_points":["Propose specific technical fixes","Recommend reasonable user protection measures and communication strategies","Consider long-term security improvement recommendations"]}],"total_possible":10}
{"question_type":"market_reasoning","scenario":"The anonymous development team of a cryptocurrency project has suddenly disappeared， with no updates on social media accounts and GitHub repositories， and the project token price rapidly dropping by 80%","instructions":"Analyze the possible causes of this situation and investor response strategies","factors_to_consider":["Development team history and transparency","Project code activity and open-source status","Community size and engagement","Fund locking and token distribution situation"],"keywords":["Team abandonment","Code activity","Community governance","Risk management"],"expected_insights":["Projects with anonymous teams have additional trust and transparency risks","Open-source projects can potentially be taken over by the community even if the team disappears","Fund and token distribution models may indicate project risks","A strong community can play a crucial role during crises"],"scoring_criteria":[{"criterion":"Situation assessment","points":3,"key_points":["Analyze possible reasons for the team's disappearance (exit scam， regulatory pressure， internal conflicts， etc.)","Evaluate the current state and sustainability of the project's technology"]},{"criterion":"Loss assessment","points":2,"key_points":["Estimate potential losses faced by investors and community members","Analyze the possibility of long-term recovery for the project"]},{"criterion":"Risk management strategies","points":3,"key_points":["Propose measures for investors to respond to similar crises","Suggest how to evaluate project risks in the future"]},{"criterion":"Prevention recommendations","points":2,"key_points":["Propose methods to identify high-risk projects","Recommend portfolio management strategies"]}],"total_possible":10}
{"question_type":"security_assessment","scenario":"A decentralized finance (DeFi) protocol has suffered a flash loan attack， resulting in a loss of approximately $10 million from the liquidity pool","instructions":"Analyze the attack mechanism and propose preventive recommendations","factors_to_consider":["Technical mechanisms of flash loan attacks","Specific vulnerabilities in this DeFi protocol","Historical cases of similar attacks","Possible security improvement measures"],"keywords":["Flash loan attack","Price oracle","Liquidity pool security","Decentralized governance"],"expected_insights":["Flash loan attacks typically exploit price manipulation or reentrancy vulnerabilities","Multiple oracles and time locks can improve security","Contract audits cannot find all vulnerabilities","Economic design is also part of the security architecture"],"scoring_criteria":[{"criterion":"Attack mechanism analysis","points":4,"key_points":["Accurately describe the general mechanism of flash loan attacks","Analyze protocol vulnerabilities that may have been exploited in this specific attack"]},{"criterion":"Impact assessment","points":2,"key_points":["Evaluate direct and indirect impacts of the attack on protocol users and ecosystem","Analyze potential loss of protocol reputation and user trust"]},{"criterion":"Preventive measures","points":4,"key_points":["Propose specific technical improvement suggestions","Recommend governance and risk management improvements","Recommend appropriate audit and testing strategies"]}],"total_possible":10}
{"question_type":"security_assessment","scenario":"Compare the security features of hardware wallets， custodial wallets， and decentralized wallets","instructions":"Evaluate the security advantages and disadvantages of different types of cryptocurrency wallets","factors_to_consider":["Private key management mechanisms","Ability to resist hacker attacks","User error and private key loss risks","Balance between usability and security"],"keywords":["Private key management","Cold storage","Mnemonic phrases","Multi-signature"],"expected_insights":["Hardware wallets provide strong physical isolation but have supply chain risks","Custodial wallets are easy to use but introduce third-party risks","Decentralized wallets balance autonomy and ease of use","Security requirements should be adjusted based on asset value and user technical ability"],"scoring_criteria":[{"criterion":"Comparative analysis","points":4,"key_points":["Comprehensively compare security models of different wallet types","Accurately identify security advantages and weaknesses of each wallet type"]},{"criterion":"Threat model","points":3,"key_points":["Analyze the main threat types facing each wallet type","Evaluate effectiveness against different attack vectors"]},{"criterion":"Practical recommendations","points":3,"key_points":["Provide wallet selection advice based on user needs and asset scale","Propose practical methods to enhance security for different types of wallets"]}],"total_possible":10} 
{"question_type": "short_answer", "instructions": "Examine the technical mechanics of cross-chain bridge vulnerabilities， assess systemic contagion risks to the multi-chain ecosystem， evaluate the impact on user confidence in interoperability solutions， and propose comprehensive security frameworks for bridge protocols， including validation mechanisms and emergency-response procedures.", "scenario": "A popular cross-chain bridge protocol connecting Ethereum and Binance Smart Chain suffers an $82 million exploit after attackers abuse a flaw in its asset-verification logic， minting tokens on one chain without burning them on the source chain and enabling double-spending across networks.", "factors_to_consider": ["Bridge architecture and validator-consensus design", "Asset locking， minting， and verification mechanisms", "Systemic risk propagation across interconnected chains", "Centralised custody of wrapped assets on exchanges", "User confidence in interoperability solutions", "Emergency-response tools such as circuit-breakers and pause functions"], "keywords": ["Bridge architecture", "Validator consensus", "Asset-locking flaws", "Double-spend", "Circuit breakers", "Emergency pause", "Slashing incentives", "Cross-chain contagion"], "expected_insights": ["Cross-chain bridge exploits can create systemic contagion risks that span multiple blockchains.", "Weak verification logic and insufficient validator diversity are common root causes of forged assets and double-spend events.", "Rapid incident-response features (e.g.， circuit breakers) limit damage and preserve user confidence.", "Robust cryptographic proofs， slashing incentives， and frequent audits form a baseline security framework for bridge protocols."], "scoring_criteria": [{"criterion": "Technical vulnerability analysis", "points": 4, "key_points": ["Detail how the verification flaw enabled forged tokens and double-spending.", "Identify weaknesses in validator-consensus or cryptographic-proof design."]}, {"criterion": "Ecosystem impact assessment", "points": 3, "key_points": ["Evaluate potential spill-over effects on interconnected chains and DeFi protocols.", "Assess short-term versus long-term user confidence in bridge solutions.", "Quantify spill-over to liquidity pools and custodial exchanges holding wrapped assets."]}, {"criterion": "Prevention and mitigation strategies", "points": 3, "key_points": ["Propose validation， slashing， and emergency-pause frameworks.", "Recommend operational best practices and third-party auditing procedures."]}], "total_possible": 10, "id": 1}
{"question_type": "short_answer", "instructions": "Analyze the multi-vector social-engineering approach used in NFT-focused attacks， evaluate unique vulnerabilities in NFT-marketplace ecosystems， assess the role of social media in crypto security breaches， and develop comprehensive user-education and platform-security recommendations for both collectors and marketplace operators.", "scenario": "Attackers compromise the Instagram account of a major NFT project and post fake mint links that route users to malicious smart contracts， stealing about $3 million worth of NFTs and cryptocurrency from collectors who believed they were participating in an official drop.", "factors_to_consider": ["Phishing tactics and social-media account security", "Smart-contract verification and wallet-connection flows", "Community trust mechanisms and official communication channels", "User education on transaction-signing and scam detection", "Marketplace responsibility for authentication and monitoring"], "keywords": ["Phishing detection", "Smart contract verification", "Social-media security", "Community trust", "Wallet signing UX", "Verified links", "Marketplace authentication", "Incident response"], "expected_insights": ["Compromised official channels amplify phishing reach and credibility， making NFT collectors prime targets.", "NFT marketplaces rely heavily on external social-media trust， increasing attack surface compared with fungible-token exchanges.", "Mandatory contract warnings， verified links， and wallet-permission prompts can drastically reduce scam success rates.", "Ongoing user education and platform-level authentication systems are essential to sustain trust in the NFT economy.", "Emerging insurance or restitution funds could partially socialise losses after NFT scams."], "scoring_criteria": [{"criterion": "Social-engineering attack analysis", "points": 3, "key_points": ["Explain how attackers leveraged brand trust and urgency to deceive users.", "Map the attack chain from social-media compromise to asset theft."]}, {"criterion": "NFT-ecosystem vulnerability assessment", "points": 3, "key_points": ["Identify marketplace and wallet-design weaknesses unique to NFTs.", "Discuss risks arising from off-chain communication channels."]}, {"criterion": "Security education and prevention measures", "points": 2, "key_points": ["Recommend clear signing-flow UX and scam-warning standards.", "Outline user-awareness campaigns and best-practice guidelines."]}, {"criterion": "Platform responsibility recommendations", "points": 2, "key_points": ["Propose verification badges， official-link registries， and automated scam monitoring.", "Define incident-response expectations for marketplaces and project teams."]}], "total_possible": 10, "id": 2}
{"question_type": "short_answer", "instructions": "Dissect the technical mechanisms of MEV extraction and front-running attacks， evaluate the broader implications for DeFi market fairness and user costs， analyze the economic incentives driving these behaviors， and propose technical (e.g.， commit-reveal) and governance approaches to mitigate harmful MEV while preserving beneficial market-making activities.", "scenario": "A sophisticated MEV-bot operator extracts over $10 million in a single day by front-running large DEX swaps， monitoring the mempool for high-value transactions and submitting higher-gas orders to manipulate prices before and after the target trades execute.", "factors_to_consider": ["Transaction ordering and mempool transparency", "Gas-auction dynamics and sandwich-attack economics", "User cost and market-slippage impacts", "User-initiated protections (e.g.， MEV-resistant wallets， private mempools)", "Commit-reveal， batch auctions， and fair-sequencing services", "Governance models such as PBS and MEV-Boost"], "keywords": ["Transaction ordering", "Mempool analysis", "Gas auctions", "Sandwich attacks", "Fair sequencing services", "Batch auctions", "Proposer-Builder Separation", "MEV-Boost", "Dark pools"], "expected_insights": ["Open mempools allow bots to extract value at the expense of ordinary users， eroding trust in DeFi fairness.", "Gas auctions and miner incentives naturally favour higher-bid front-runners， creating systemic inefficiencies.", "Commit-reveal schemes， batch auctions， and PBS can reduce harmful MEV without eliminating beneficial liquidity provision.", "Policy and governance coordination are required because purely technical solutions may shift， not remove， extraction vectors."], "scoring_criteria": [{"criterion": "MEV attack-mechanism analysis", "points": 4, "key_points": ["Break down mempool monitoring， priority-gas auctions， and sandwich-execution flow.", "Quantify extracted value relative to target transaction volume."]}, {"criterion": "Market-impact and fairness assessment", "points": 3, "key_points": ["Assess slippage， price manipulation， and user-trust implications.", "Compare historical MEV incidents to traditional market-manipulation analogues."]}, {"criterion": "Technical and governance solutions", "points": 3, "key_points": ["Evaluate efficacy of commit-reveal， batch auctions， and FSS.", "Discuss PBS/MEV-Boost and potential policy or incentive reforms."]}], "total_possible": 10, "id": 3}
{"question_type": "short_answer", "instructions": "Examine vulnerabilities in token-based governance systems， analyze the mechanics of flash-loan governance attacks， assess broader implications for DAO security and decentralized decision-making， and design robust governance frameworks that balance efficiency with security， including time delays， quadratic voting， and reputation systems.", "scenario": "A decentralized protocol valued at $200 million faces a hostile takeover when attackers use flash loans to obtain a temporary majority (>50 % of voting power) and pass a malicious proposal that drains the treasury before legitimate holders can react.", "factors_to_consider": ["Governance-token distribution and voting-power concentration", "Flash-loan mechanics and temporary voting power", "Proposal submission and execution delays", "Quorum and participation thresholds", "Sybil resistance and delegate systems", "Emergency-veto or guardian roles"], "keywords": ["Flash-loan attack", "Governance token distribution", "Voting-power concentration", "Time-locked execution", "Quorum requirements", "Quadratic voting", "Delegate systems", "Reputation voting"], "expected_insights": ["Flash-loan governance exploits highlight the fragility of purely stake-weighted voting systems.", "Execution delays and multi-step confirmations can prevent treasury drains by giving the community time to intervene.", "Quadratic or reputation-weighted voting and delegated governance reduce takeover feasibility without crippling efficiency.", "Long-term legitimacy of DAOs depends on balancing open participation with robust defensive checks."], "scoring_criteria": [{"criterion": "Governance-attack mechanism analysis", "points": 3, "key_points": ["Describe how flash loans confer temporary majority voting power.", "Explain proposal flow from submission to execution."]}, {"criterion": "DAO-security vulnerability assessment", "points": 3, "key_points": ["Identify weaknesses in quorum， time-locks， and voter-participation design.", "Compare with past DAO governance exploits."]}, {"criterion": "Governance-system design improvements", "points": 3, "key_points": ["Recommend quadratic/reputation voting， delegate models， and vote-decay schemes.", "Propose monitoring and automated-veto mechanisms."]}, {"criterion": "Long-term ecosystem implications", "points": 1, "key_points": ["Assess impact on DAO legitimacy and investor confidence."]}], "total_possible": 10, "id": 4}
{"question_type": "short_answer", "instructions": "Analyze the mechanics of supply-chain attacks within the Web3 ecosystem， focusing on the risks posed by third-party dependencies in decentralized applications. Evaluate the challenges of code verification and trust in decentralized systems. Develop comprehensive security practices for developers and users， emphasizing dependency management， code auditing， and incident response. Provide specific technical recommendations for implementing reproducible builds and Software Bill of Materials (SBOMs) to enhance security.", "scenario": "A popular cryptocurrency wallet library， 'ethers.js'， is compromised after attackers inject malicious code into its npm package. This code includes a backdoor that exfiltrates private keys and seed phrases from applications using the library. The attack exploits a vulnerability in the package's continuous integration pipeline， allowing unauthorized code commits. Over 50，000 users lose a combined $15 million before detection. The incident highlights the need for robust supply chain security measures in Web3 environments， where decentralized applications rely heavily on third-party libraries.", "factors_to_consider": ["Vulnerabilities in continuous integration and deployment pipelines", "Techniques for ensuring reproducible builds and deterministic outputs", "Implementation of Software Bill of Materials (SBOMs) for dependency transparency", "Automated malware detection and continuous integration scanning", "Developer and user trust-assurance mechanisms in decentralized environments", "Incident-response procedures and user remediation paths in Web3"], "keywords": ["Dependency management", "Package verification", "Code signing", "Reproducible builds", "SBOM", "npm security", "Wallet library auditing", "Malware detection", "Web3 security", "Decentralized application security"], "expected_insights": ["Open-source dependencies in Web3 create a broad attack surface; malicious updates can silently compromise thousands of downstream projects.", "Reproducible builds and deterministic package locks enable earlier detection of injected code， crucial for maintaining integrity in decentralized applications.", "Mandatory code signing and SBOMs improve accountability and traceability across the supply chain， enhancing trust in Web3 ecosystems.", "Rapid incident-response playbooks， user-level key-rotation guidance， and bounty-backed audits mitigate damage and rebuild trust in decentralized systems.", "UI wallets using the compromised library may require forced-update or kill-switch mechanisms to protect end users in a decentralized context."], "scoring_criteria": [{"criterion": "Supply-chain attack analysis", "points": 4, "key_points": ["Detail how the npm package was compromised and distributed， and how private keys were exfiltrated.", "Explain the role of continuous integration vulnerabilities in the attack."]}, {"criterion": "Developer-ecosystem risk assessment", "points": 3, "key_points": ["Evaluate dependency sprawl and privilege of third-party libraries in Web3.", "Compare with historical supply-chain compromises in crypto and Web3."]}, {"criterion": "Security best practices and prevention", "points": 3, "key_points": ["Recommend SBOMs， reproducible builds， and signed releases specific to Web3.", "Outline monitoring， auditing， and incident-response frameworks tailored for decentralized applications."]}], "total_possible": 10, "id": 5}
{"question_type": "short_answer", "instructions": "Evaluate the security assumptions of optimistic rollups， dissect how the faulty fraud-proof logic enables invalid state transitions， assess user-fund risks and contagion to L1 assets， and propose improvements to proof mechanisms， challenger incentives， and escape-hatch procedures.", "scenario": "An optimistic rollup on Ethereum with $1.5 billion TVL discovers that a bug in its fraud-proof smart contract allows malicious sequencers to publish an invalid state root that cannot be challenged within the 7-day dispute window.", "factors_to_consider": ["Fraud-proof circuit and verification contract design", "Challenge-window duration and on-chain data availability", "Sequencer decentralization and proposer incentives", "Escape-hatch and emergency-withdrawal mechanisms", "Bridging and withdrawal finality between L2 and L1"], "keywords": ["Optimistic rollup", "Fraud proof", "State root", "Challenge window", "Escape hatch", "Data availability", "Sequencer decentralization", "Withdrawal finality"], "expected_insights": ["Fraud-proof bugs undermine the core security assumption of optimistic rollups， risking invalid state roots settling on L1.", "Long challenge windows mitigate risk but delay withdrawals and UX.", "Escape-hatch contracts and diversified challenger incentives reduce single-point-of-failure risk.", "Regular audits and formal verification of proof circuits are essential for rollup security."], "scoring_criteria": [{"criterion": "Vulnerability analysis", "points": 4, "key_points": ["Explain how the fraud-proof bug enables invalid state transitions.", "Identify missing checks or incorrect assumptions in the verification logic."]}, {"criterion": "User-impact assessment", "points": 3, "key_points": ["Quantify potential user losses and withdrawal delays.", "Discuss contagion risk to L1 assets bridged from the rollup."]}, {"criterion": "Mitigation and improvement strategies", "points": 3, "key_points": ["Propose fixes to proof contracts and challenger incentives.", "Recommend escape-hatch， auditing， and formal-verification procedures."]}], "total_possible": 10, "id": 6}
{"question_type": "short_answer", "instructions": "Conduct a detailed analysis of the de-peg event， focusing on the stablecoin's collateral management， oracle efficiency， and liquidation processes. Evaluate the risk of market contagion and propose specific improvements in governance， oracle design， and collateral diversification. Use precise market data formats， such as liquidity depth (ETH/USD) and trading volume (24h) from Uniswap and Curve， to support your analysis.", "scenario": "A decentralized collateral-backed stablecoin pegged to USD experiences a de-peg to $0.85 following a 40% drop in the price of its primary collateral， ETH. The protocol uses Chainlink oracles， which experience a 10-minute delay， causing a liquidation bottleneck. Additionally， the stablecoin's liquidity pools on Uniswap and Curve show reduced liquidity depth， exacerbating the situation. The governance mechanism is slow to respond， and the market is experiencing high volatility due to a broader crypto market downturn.", "factors_to_consider": ["Collateral diversification and risk management strategies", "Oracle update frequency and latency issues", "Efficiency of liquidation and auction mechanisms", "Liquidity depth and slippage on Uniswap and Curve", "Impact of market volatility on stablecoin stability", "Governance response time and decision-making processes"], "keywords": ["Stablecoin de-peg", "Collateral diversification", "Oracle efficiency", "Liquidation bottleneck", "Liquidity pools", "Governance mechanisms", "Market volatility"], "expected_insights": ["High reliance on a single collateral type increases vulnerability to price shocks.", "Oracle delays can significantly impact liquidation timing and market confidence.", "Effective liquidation mechanisms and incentives are crucial for peg stability.", "Diverse collateral and adaptive risk parameters enhance resilience.", "Liquidity depth and slippage on major DEXs are critical during stress events."], "scoring_criteria": [{"criterion": "Root-cause analysis of de-peg", "points": 4, "key_points": ["Identify how collateral price drop and oracle delays contributed to the de-peg.", "Analyze weaknesses in liquidation and redemption processes.", "Incorporate specific liquidity metrics such as depth (ETH/USD) and 24h trading volume."]}, {"criterion": "Assessment of market contagion risks", "points": 3, "key_points": ["Evaluate potential impacts on DeFi protocols and liquidity pools.", "Analyze user confidence and stablecoin adoption post-event.", "Use liquidity and trading volume data to assess contagion potential."]}, {"criterion": "Recommendations for peg restoration and design improvements", "points": 3, "key_points": ["Suggest oracle， collateral， and governance enhancements.", "Propose both immediate and long-term measures to prevent future de-pegs.", "Reference historical de-peg events to validate proposed solutions."]}], "total_possible": 10, "id": 7}
{"question_type": "short_answer", "instructions": "Dissect the cryptographic and contract-logic flaws leading to the exploit， assess privacy and fund-security trade-offs in mixer protocols， evaluate impacts on user anonymity sets， and recommend circuit testing， auditing， and bug-bounty practices to strengthen privacy smart contracts.", "scenario": "A zero-knowledge mixer contract is drained of 8，000 ETH after a critical bug in the Merkle-tree update logic lets attackers reuse deposit commitments and withdraw multiple times.", "factors_to_consider": ["ZK-proof circuit design and verification", "Merkle-tree update and commitment replay protection", "Auditing depth and formal-verification coverage", "Economic incentives for responsible disclosure", "Anonymity-set degradation after partial fund loss"], "keywords": ["Zero-knowledge mixer", "Merkle tree", "Commitment replay", "Anonymity set", "Circuit audit", "Formal verification", "Bug bounty"], "expected_insights": ["Mixer security depends on flawless interaction between cryptographic proofs and state-update logic.", "Commitment-replay bugs can both drain funds and reduce anonymity by correlating deposits and withdrawals.", "Continuous circuit-level testing and third-party audits are critical for privacy protocols.", "Structured bug-bounty programs incentivise early vulnerability disclosure over zero-day exploitation."], "scoring_criteria": [{"criterion": "Vulnerability dissection", "points": 4, "key_points": ["Explain how commitment replay bypassed withdrawal checks.", "Identify gaps in circuit or Merkle-update validation."]}, {"criterion": "Privacy and fund-loss assessment", "points": 3, "key_points": ["Quantify lost funds and anonymity-set reduction.", "Discuss long-term trust implications for privacy tools."]}, {"criterion": "Security-hardening recommendations", "points": 3, "key_points": ["Propose circuit testing， formal verification， and layered replay protection.", "Outline bug-bounty and community-audit frameworks."]}], "total_possible": 10, "id": 8}
{"question_type": "short_answer", "instructions": "Investigate how on-chain oracle design choices exposed the protocol， evaluate liquidity-based manipulation vectors， analyse broader market impacts， and propose resilient oracle architectures and governance guardrails for DeFi lending markets.", "scenario": "An under-collateralised lending protocol incurs $30 million in bad debt after attackers manipulate a thin-liquidity DEX pair used as its on-chain price oracle， inflating collateral value and borrowing stablecoins before the price reverts.", "factors_to_consider": ["Liquidity depth and slippage tolerance of oracle pairs", "TWAP/median parameters and update cadence", "Collateral-factor and liquidation-threshold design", "Fallback/medianised multi-source oracles (Chainlink， TWAP， Pyth， etc.)", "Protocol governance and risk-parameter change cadence"], "keywords": ["Oracle manipulation", "Thin liquidity", "TWAP attack", "Bad debt", "Multi-source oracle", "Liquidation threshold"], "expected_insights": ["DEX-dependent oracles are vulnerable when liquidity is shallow and easily moved.", "Longer TWAP windows reduce， but do not eliminate， price-swing attacks.", "Fallback aggregators and circuit-breakers help detect and mitigate manipulations.", "Dynamic collateral factors and rapid governance adjustments curb cascading bad debt."], "scoring_criteria": [{"criterion": "Oracle-attack analysis", "points": 4, "key_points": ["Describe how liquidity manipulation altered oracle prices.", "Detail timing of borrowings and debt creation."]}, {"criterion": "Protocol-risk assessment", "points": 3, "key_points": ["Quantify resultant bad debt and impact on protocol reserves.", "Compare incident to previous oracle-manipulation cases."]}, {"criterion": "Oracle-design and governance fixes", "points": 3, "key_points": ["Propose multi-source， medianised oracle frameworks.", "Recommend governance and risk-parameter safeguards."]}], "total_possible": 10, "id": 9}
{"question_type": "short_answer", "instructions": "Analyze the mechanics of large-scale rented-hash-rate attacks， evaluate vulnerabilities in PoW incentive models and hash-rate distribution， assess impacts on exchanges， and recommend confirmation-policy changes， checkpointing， and community-driven hash-rate redistribution strategies.", "scenario": "A mid-cap Proof-of-Work blockchain experiences a 150-block re-org after a mining pool rents hash power and performs a 51 % attack， double-spending coins on a major exchange.", "factors_to_consider": ["Hash-rate rental marketplaces and attack economics", "Network hash-rate concentration and pool dominance", "Exchange confirmation-depth policies", "Long-range checkpoints and finality gadgets", "Community and developer emergency responses"], "keywords": ["51 % attack", "Hash-rate rental", "Blockchain re-org", "Double-spend", "Checkpointing", "Exchange confirmations"], "expected_insights": ["Hash-rate rental markets commoditise 51 % attacks against low-hash-rate chains.", "Longer exchange confirmation requirements raise attack cost but hurt UX.", "Periodic checkpoints and merge-mining partnerships can harden PoW chains.", "Decentralised mining-pool incentives diversify hash-rate distribution."], "scoring_criteria": [{"criterion": "Re-org attack analysis", "points": 3, "key_points": ["Explain how rented hash power enabled a 150-block re-org.", "Detail double-spend execution at the exchange."]}, {"criterion": "Network-vulnerability assessment", "points": 3, "key_points": ["Evaluate hash-rate distribution and economic incentives.", "Compare with historic PoW 51 % attacks."]}, {"criterion": "Mitigation strategies", "points": 4, "key_points": ["Recommend confirmation-depth， checkpointing， and hash-rate diversification measures.", "Discuss community coordination and exchange-policy updates."]}], "total_possible": 10, "id": 10}
{"question_type": "short_answer", "instructions": "Analyse how ERC-4337’s mempool and Paymaster design enabled this attack， evaluate systemic risks to account-abstraction adoption， and propose hardened validation logic plus network-level defences.", "scenario": "Multiple ERC-4337 smart-wallets are drained after a malicious Bundler front-runs users’ UserOperations and exploits a flawed Paymaster that never checks the wallet’s nonce.", "factors_to_consider": ["Bundler mempool ordering and front-running vectors", "Paymaster sponsorship rules and signature verification", "Smart-wallet nonce & initCode validation", "UserOperation simulation versus on-chain reality", "Network-wide monitoring of rogue Bundlers"], "keywords": ["ERC-4337", "Bundler", "Paymaster", "Nonce replay", "UserOperation", "Account abstraction"], "expected_insights": ["Missing nonce checks let attackers replay or reorder operations.", "Bundlers can privately simulate and pre-sign fraudulent ops.", "Permissioned Bundler lists and paymaster whitelisting mitigate risk.", "Wallet libraries must fail closed if post-simulation state diverges."], "scoring_criteria": [{"criterion": "Attack-mechanism analysis", "points": 5, "key_points": ["Explain front-run & nonce-replay path.", "Highlight Paymaster-signature flaws."]}, {"criterion": "Ecosystem risk assessment", "points": 3, "key_points": ["Quantify potential user-fund loss.", "Compare to EOAs + gas-sponsorship models."]}, {"criterion": "Mitigation strategies", "points": 2, "key_points": ["Propose wallet-side nonce & simulation guards.", "Recommend Bundler reputation / slashing systems."]}], "total_possible": 10, "id": 11}
{"question_type": "short_answer", "instructions": "Evaluate the rollup’s DA assumptions， analyse user-fund risk during prolonged outages， and design fallback and exit-queue mechanisms that preserve liveness without sacrificing security.", "scenario": "A zk-rollup pauses withdrawals when its data-availability committee goes offline during a network partition， raising fears that exit proofs cannot be generated.", "factors_to_consider": ["Off-chain DA committee quorum and redundancy", "Proof generation requirements for exits", "On-chain fallback to full data publication", "Economic incentives for DA providers", "User UX and withdrawal-timeout guarantees"], "keywords": ["zk-rollup", "Data availability", "Exit proof", "Committee quorum", "Fallback posting"], "expected_insights": ["Without DA blobs users cannot reconstruct state for exits.", "Redundant committees or on-chain full-data mode restore liveness.", "Timeout-based mandatory blob posting aligns incentives.", "Auditable uptime SLAs reduce trust-surface perception."], "scoring_criteria": [{"criterion": "DA-failure analysis", "points": 4, "key_points": ["Detail how missing blobs halt proof generation.", "Assess partition vs. malicious withholding."]}, {"criterion": "User-impact assessment", "points": 3, "key_points": ["Estimate withdrawal delays and fund-safety model.", "Contrast with optimistic-rollup liveness properties."]}, {"criterion": "Resilience improvements", "points": 3, "key_points": ["Propose quorum， fallback， or validity-proof tweaks.", "Suggest escrow or slashing for DA operators."]}], "total_possible": 10, "id": 12}
{"question_type": "short_answer", "instructions": "Dissect how validator-slashing risk propagates to LSD price， evaluate contagion to DeFi lending pools， and recommend collateral-factor， insurance， and staking-diversification policies.", "scenario": "A liquid-staking derivative (LSD) crashes to 0.7 ETH after its validator set faces correlated slashing， triggering forced unwinds on money-markets that accept the LSD as collateral.", "factors_to_consider": ["Validator set geography & client diversity", "Collateral-factor design for LSDs", "Liquidation bots vs. slippage on LSD/ETH pools", "Slashing-insurance fund sizing", "Lender & borrower risk disclosures"], "keywords": ["Liquid staking", "Slashing", "Collateral factor", "Insurance fund", "De-peg"], "expected_insights": ["Slashing cuts backing ETH， shrinking redemption value.", "Money-markets assuming 1:1 peg suffer under-collateralisation.", "Diversified validators and on-chain reserves buffer slashing shocks.", "Dynamic collateral factors tied to oracle spreads limit systemic risk."], "scoring_criteria": [{"criterion": "Risk-propagation analysis", "points": 4, "key_points": ["Link slashing event to LSD price path.", "Show liquidation & bad-debt cascade."]}, {"criterion": "DeFi-contagion assessment", "points": 4, "key_points": ["Quantify bad debt for lending markets.", "Compare with Terra/UST-style cascades."]}, {"criterion": "Mitigation proposals", "points": 2, "key_points": ["Suggest insurance， validator-diversity metrics.", "Outline collateral-factor governance triggers."]}], "total_possible": 10, "id": 13}
{"question_type": "short_answer", "instructions": "Analyse the proof-verification flaw， explore blast-radius across dApps that rely on the messenger， and propose secure light-client or zk-proof designs plus kill-switch governance.", "scenario": "A cross-chain messaging protocol suffers a relay-proof forgery that lets attackers execute privileged messages on Polygon without origin-chain approval.", "factors_to_consider": ["Relayer trust and proof format", "Destination-chain on-chain verifier logic", "Replay / domain-separator checks", "dApp-level privilege segregation", "Emergency pause & governance recovery"], "keywords": ["Cross-chain messaging", "Proof forgery", "Relay", "Light client", "Kill switch"], "expected_insights": ["Omitted domain-separator enables cross-domain replay.", "dApps granted blanket `execute()` access face full takeover.", "On-chain light-clients or zk-proofs remove single-relayer trust.", "Governance must provide rapid contract-upgrade path to patch."], "scoring_criteria": [{"criterion": "Forgery-mechanism analysis", "points": 4, "key_points": ["Show how fake proof bypasses verification.", "Identify missing root-of-trust or replay check."]}, {"criterion": "Ecosystem-impact assessment", "points": 3, "key_points": ["List affected chains / dApps & funds at risk.", "Compare to past Ronin / Wormhole incidents."]}, {"criterion": "Hardening recommendations", "points": 3, "key_points": ["Propose light-client/zk architecture.", "Define emergency governance procedures."]}], "total_possible": 10, "id": 14}
{"question_type": "short_answer", "instructions": "Analyze the technical and operational aspects of the incident， focusing on the software update's role and the validator's configuration responsibilities. Discuss the legal and economic repercussions， and propose a balanced compensation and prevention framework. Include specific compensation calculation methods to assess the economic impact on delegators and the community pool. Consider legal precedents， insurance frameworks， and the role of protocol governance in validator slashing incidents.", "scenario": "A Cosmos validator misconfigures double-sign protection due to a software update that introduced a new configuration parameter， causing 5% of the chain's stake to be slashed. Delegators demand compensation from community funds. The incident results in significant financial losses for delegators， raising questions about fault， liability， and compensation frameworks. The validator's negligence in configuring double-sign protection is disputed， with debates on whether the fault lies with the operator， the protocol's update process， or inadequate documentation.", "factors_to_consider": ["Operator negligence vs. protocol update issues", "Delegator risk disclosures and informed consent", "Precedent of community-fund bailouts and their moral hazard implications", "Insurance models and slashing-derivative markets", "Impact of software update documentation and validator education", "Specific compensation calculation methods based on delegator loss and community pool size"], "keywords": ["Double sign", "Slashing", "Delegator risk", "Community pool", "Validator insurance", "Compensation framework", "Telemetry monitoring", "Protocol update", "Configuration management"], "expected_insights": ["A strict-liability view places the cost on the operator and their insurance.", "Bailouts funded by community pools can create moral hazard for future validators.", "Clear telemetry and sentinel alerts significantly reduce the likelihood of double-signing incidents.", "Parametric insurance tokens can help distribute the risk of black-swan slashes across the network.", "A detailed compensation framework， including calculation methods， is essential for fairness and transparency.", "The role of protocol governance in managing update processes and documentation is crucial."], "scoring_criteria": [{"criterion": "Fault & liability analysis", "points": 4, "key_points": ["Separate operator fault from protocol design and update process， considering potential misconfigurations.", "Reference legal precedents or case studies involving similar slashing incidents."]}, {"criterion": "Economic impact assessment", "points": 3, "key_points": ["Estimate the loss experienced by delegators and compare it to the community pool size.", "Discuss the long-term effects on staking APR， delegator confidence， and validator participation."]}, {"criterion": "Compensation & prevention plan", "points": 3, "key_points": ["Outline insurance or bond requirements to protect delegators and mitigate risks.", "List monitoring and governance safeguards， including telemetry systems and alert mechanisms.", "Provide a detailed compensation calculation framework for impacted delegators."]}], "total_possible": 10, "id": 15}
{"question_type": "short_answer", "instructions": "Investigate supply-chain tampering vectors， assess user-fund risk for both new and existing customers， and propose manufacturing， distribution， and firmware-audit countermeasures.", "scenario": "A shipment of hardware wallets is found to contain tampered secure-element firmware that leaks seed phrases over BLE during setup， affecting 25，000 new devices.", "factors_to_consider": ["Secure-element code-signing & attestation", "Physical distribution chain and customs checks", "BLE pairing trust model", "Post-market firmware-upgrade capability", "User guidance for authenticity verification"], "keywords": ["Hardware wallet", "Supply-chain attack", "Secure element", "Firmware attestation", "BLE leak"], "expected_insights": ["Unsigned SE firmware undermines root-of-trust.", "BLE pairing is often ignored—needs OOB verification.", "Factory HSM signing + transparency logs deter tampering.", "Forced critical update + seed-rotation protocol reduces harm."], "scoring_criteria": [{"criterion": "Tamper-vector analysis", "points": 4, "key_points": ["Trace compromise path from factory to user.", "Explain BLE exfiltration details."]}, {"criterion": "Risk & impact assessment", "points": 3, "key_points": ["Quantify funds at risk for shipped vs. in-use devices.", "Assess brand-trust fallout."]}, {"criterion": "Countermeasure framework", "points": 3, "key_points": ["Detail attestation， logistics， and user-check steps.", "Propose coordinated disclosure & recall playbook."]}], "total_possible": 10, "id": 16}
{"question_type": "short_answer", "instructions": "Analyse how single-sequencer architectures enable censorship or liveness failures， compare with shared-sequencer or PBS designs， and suggest incremental decentralisation roadmaps.", "scenario": "Users cannot submit transactions on a popular L2 for two hours because its single sequencer halts new blocks while still accepting its own withdrawals.", "factors_to_consider": ["Sequencer monopoly & MEV incentives", "Forced-exit and escape-hatch contracts", "Shared-sequencer networks & PBS", "Proof-of-authority bootstrapping vs. decentralised set", "User UX during downtime"], "keywords": ["Sequencer", "Censorship", "L2 liveness", "Shared sequencer", "PBS"], "expected_insights": ["Single sequencer = single point of censorship.", "Users need permissionless force-include channels.", "Shared sequencer meshes or PBS diversify block creators.", "Progressive decentralisation must balance latency & cost."], "scoring_criteria": [{"criterion": "Censorship-risk analysis", "points": 4, "key_points": ["Explain halting & self-withdraw exploits.", "Compare to Ethereum proposer separation."]}, {"criterion": "User-impact assessment", "points": 3, "key_points": ["Measure downtime cost & trust erosion.", "Evaluate force-exit contract usability."]}, {"criterion": "Decentralisation roadmap", "points": 3, "key_points": ["Propose multi-sequencer， PBS， or committee options.", "Detail governance & economic incentives."]}], "total_possible": 10, "id": 17}
{"question_type": "short_answer", "instructions": "Estimate realistic timelines and tooling needed for quantum theft， assess mitigation via sweeping & taproot scripts， and outline chain-wide key-upgrade strategies.", "scenario": "News of a practical 2，048-bit RSA quantum break sparks panic that early Bitcoin P2PK outputs can be stolen once mined.", "factors_to_consider": ["Proportion of vulnerable unspent outputs", "Public-key exposure timing (pre vs. post-spend)", "Taproot KeyPath vs. ScriptPath migration", "Network-level soft-forks for quantum-resistant sigs", "User-education and sweeping tools"], "keywords": ["Quantum threat", "P2PK", "Taproot", "Key migration", "Sweeping"], "expected_insights": ["Only outputs with exposed pubkeys are at imminent risk.", "Batch sweeping + CPFP can rescue dormant coins.", "Soft-fork adding hash-based sig-algos future-proofs chain.", "Timeline for large-scale Shor attack still years away."], "scoring_criteria": [{"criterion": "Threat realism analysis", "points": 4, "key_points": ["Quantify qubits vs. RSA-2048 break claims.", "Identify actually exposed Bitcoin outputs."]}, {"criterion": "Mitigation plan", "points": 3, "key_points": ["Outline sweeping scripts & incentives.", "Propose consensus changes for PQC."]}, {"criterion": "Communication & governance", "points": 3, "key_points": ["Craft messaging to avoid panic sell-off.", "Describe coordinated upgrade path."]}], "total_possible": 10, "id": 18}
{"question_type": "short_answer", "instructions": "Explain the technical GPS spoofing vectors used in this attack， measure the economic impact on the network， and propose defences using sensor fusion， stake-slashing， and machine learning anomaly detection. Expand on GPS spoofing techniques and their countermeasures， including specific hardware and software tactics.", "scenario": "A location-based DePIN network rewarding IoT hotspots discovers widespread GPS-spoofing that fakes coverage data， draining 15% of the daily emissions. The GPS spoofing attack uses advanced replay and SDR techniques to manipulate location data， undermining the system’s economic model and security.", "factors_to_consider": ["GPS spoof hardware & software tactics (e.g.， signal replay， SDR)", "Proof-of-coverage protocol design", "Stake or bond size vs. reward size", "Cross-sensor corroboration (Wi-Fi， LoRa， BLE)", "On-chain anomaly detection & slashing mechanisms", "Economic model and cost-benefit analysis for spoofing"], "keywords": ["DePIN", "GPS spoof", "Proof of coverage", "Sensor fusion", "Anomaly detection", "SDR", "Economic impact"], "expected_insights": ["Single-sensor proofs are easy to fake at scale using SDR or signal replay.", "The economic model must ensure that the cost of spoofing exceeds the rewards.", "Cross-sensor fusion and randomness reduce the surface area for collusion.", "On-chain ML-based anomaly detection can flag suspicious hotspots for review."], "scoring_criteria": [{"criterion": "Spoof-vector analysis", "points": 4, "key_points": ["Describe GPS-signal replay and SDR tricks used for spoofing.", "Assess the cost of hardware spoofing versus the token rewards.", "Expand on specific spoofing techniques and their effectiveness."]}, {"criterion": "Economic-impact assessment", "points": 3, "key_points": ["Quantify the dilution of emissions and the loss of honest nodes.", "Compare the economic impact to similar cases such as Helium.", "Analyze how the spoofing attack affects long-term network sustainability."]}, {"criterion": "Defence proposals", "points": 3, "key_points": ["Detail how sensor fusion can be used to detect and prevent spoofing.", "Propose stake-slashing mechanisms and their effectiveness in deterring attacks.", "Design an anomaly-detection pipeline using on-chain data and ML models."]}], "total_possible": 10, "id": 19}
{"question_type": "short_answer", "instructions": "Analyze how the reuse of selective-disclosure proofs can lead to privacy leaks by correlating user identities across dApps. Evaluate the trade-offs between privacy， usability， and regulatory compliance， using specific metrics such as proof size， computational overhead， and user experience. Design a zk-credential or pairwise-identifier scheme using specific protocols like BBS+ or ZKP-JWT that restores unlinkability and propose a revocation mechanism that maintains privacy.", "scenario": "A decentralised-identity (DID) registry using the Ethereum-based ERC-1056 standard upgrades to on-chain selective-disclosure proofs with BBS+ signatures. However， this upgrade inadvertently allows correlation of user pseudonyms across different decentralized applications (dApps) due to proof reuse.", "factors_to_consider": ["Proof reuse across multiple dApps using ERC-1056", "Pairwise pseudonym generation using BBS+ signatures", "zk-credential primitives like BBS+ and ZKP-JWT", "Revocation and update user experience", "Regulatory compliance balancing KYC and anonymity", "Computational overhead and proof size"], "keywords": ["DID", "ERC-1056", "BBS+ signatures", "Selective disclosure", "Linkage attack", "Pairwise identifier", "zk-credential", "ZKP-JWT"], "expected_insights": ["Reusing the same proof across dApps can create a global identifier， leading to privacy leaks.", "Implementing pairwise identifiers or using blinded signatures can preserve unlinkability.", "Revocation lists should be designed to avoid revealing the user's social graph.", "Balancing privacy budgets with user experience and compliance is crucial for adoption.", "Understanding the computational trade-offs of zk-credentials in real-world applications."], "scoring_criteria": [{"criterion": "Privacy-leak analysis", "points": 4, "key_points": ["Explain how proof hash reuse leads to correlation across dApps.", "Illustrate an attack model using specific DID methods like ERC-1056."]}, {"criterion": "Trade-off assessment", "points": 3, "key_points": ["Use specific metrics such as proof size and computational overhead to evaluate privacy vs. usability.", "Compare with centralized OAuth patterns and discuss implications."]}, {"criterion": "Design improvements", "points": 3, "key_points": ["Propose a zk-credential or pairwise scheme using BBS+ or ZKP-JWT.", "Outline a revocation and upgrade path that maintains privacy."]}], "total_possible": 10, "id": 20}
{"question_type": "short_answer", "instructions": "Dissect how biased randomness or leaked transcripts in trusted-setup ceremonies compromise soundness， analyse downstream inflation contagion to DeFi apps， and propose cryptographic and organisational counter-measures for future ceremonies.", "scenario": "During the multi-party ceremony for a new zk-SNARK layer-1， one coordinator quietly keeps discarded entropy contributions and later forges invalid proofs that mint 500 million native tokens without detection， inflating supply by 10 %.", "factors_to_consider": ["Powers-of-tau workflow and toxic-waste risk", "Coordinator incentives and public-verifier audits", "Decentralised ceremony participation and transparency logs", "Fallback proof-of-stake checkpoints against forged state", "Insurance funds or burn-mechanisms for unexpected inflation"], "keywords": ["MPC ceremony", "Toxic waste", "Trusted setup", "Proof forgery", "Inflation bug", "Audit transcript"], "expected_insights": ["Leaked toxic waste lets attackers create valid-looking but fraudulent proofs.", "Supply-inflation undermines on-chain collateral assumptions across DeFi.", "Open-verifier ceremonies， KZG-based upgrades， or shift to transparent proofs remove single-point failure.", "Real-time supply monitoring and kill-switch governance mitigate impact."], "scoring_criteria": [{"criterion": "Ceremony-vulnerability analysis", "points": 4, "key_points": ["Explain entropy-reuse path to proof forgery.", "Identify procedural lapses (recording devices， custody of transcripts)."]}, {"criterion": "Ecosystem-impact assessment", "points": 3, "key_points": ["Quantify excess token supply effects on DeFi collateral ratios.", "Contrast with previous Zcash parameter leaks."]}, {"criterion": "Mitigation & redesign strategies", "points": 3, "key_points": ["Compare transparent-proof alternatives (Halo， Plonk-no-setup).", "Outline open-source tooling， bounty programmes， and live auditing."]}], "total_possible": 10, "id": 21}
{"question_type": "short_answer", "instructions": "Examine the risks of client-monoculture in PoS networks， detail how state-divergence or mass-crashes compromise liveness and safety， and design governance and incentive mechanisms to increase client diversity and rapid-patch deployment.", "scenario": "A critical parsing bug in the dominant Go client for an Ethereum-like PoS chain causes 80 % of validators to crash on an out-of-bounds block header， halting finality for six hours and forcing an emergency hard-fork.", "factors_to_consider": ["Majority-client dominance and correlated failures", "Slashing vs. rescue-fork trade-offs", "Diversity-boosting incentives (score-based weighting， subsidies)", "Bug-bounty and formal-verification coverage gaps", "Exchange and staking-provider dependency on single binaries"], "keywords": ["Client monoculture", "Consensus crash", "Finality stall", "Emergency hard-fork", "Validator incentives"], "expected_insights": ["Single-client dominance converts implementation bugs into consensus failures.", "PoS chains face both liveness loss and potential unintentional slashing.", "Multi-client rewards， differential fee rebates， and mandatory diversity in large pools mitigate monoculture.", "Automated canary networks and rolling updates shorten patch windows."], "scoring_criteria": [{"criterion": "Bug-impact analysis", "points": 4, "key_points": ["Trace header-parsing flaw to validator crash.", "Explain why ≥66 % offline stalls finality."]}, {"criterion": "Diversity-risk assessment", "points": 3, "key_points": ["Measure current client-share distribution.", "Compare with historical Prysm vs. Geth incidents."]}, {"criterion": "Diversity-incentive proposals", "points": 3, "key_points": ["Suggest protocol or governance knobs that reward heterogeneous setups.", "Outline rapid-patch & fork-choice communication channels."]}], "total_possible": 10, "id": 22}
{"question_type": "short_answer", "instructions": "Analyse architectural risks of upgradeable proxy patterns， map the exploit chain from key compromise to malicious logic， assess trust assumptions in admin roles， and recommend hardened governance-by-code， timelocks， and decentralised admin frameworks.", "scenario": "Attackers obtain the private key controlling an upgradeable proxy’s admin slot for a leading money-market， push a new implementation that sets all collateral factors to zero， and drain $250 million of assets before detection.", "factors_to_consider": ["Transparent vs. UUPS proxy models", "Timelocked upgrades and multi-sig guardians", "On-chain verifiable build pipelines", "Runtime monitoring of implementation hashes", "Immutable-core vs. upgradeable-module trade-offs"], "keywords": ["Proxy upgrade", "Admin key", "Timelock", "Immutable core", "Multi-sig guardian"], "expected_insights": ["Proxy-upgrade control is a single critical permission; key loss equals total contract loss.", "Timelock delays and community-watch can allow emergency vetoes.", "Module separation lets critical accounting stay immutable while adding features upgradeably.", "On-chain code-hash beacons and continuous monitoring surface malicious binaries early."], "scoring_criteria": [{"criterion": "Exploit-flow analysis", "points": 3, "key_points": ["Detail private-key theft vectors (phishing， signing-device compromise).", "Explain collateral-factor zeroing and drain path."]}, {"criterion": "Trust-assumption assessment", "points": 4, "key_points": ["Evaluate admin-slot centralisation vs. multi-sig vs. DAO controls.", "Reference previous Ronin， bZx， or Ankr upgrade incidents."]}, {"criterion": "Governance-hardening measures", "points": 3, "key_points": ["Propose multi-layer timelocks， guardian vetos， and on-chain diff alerts.", "Recommend staged de-permissioning roadmap."]}], "total_possible": 10, "id": 23}
{"question_type": "short_answer", "instructions": "Break down how cross-vault delegatecalls and missing reentrancy guards enabled the exploit， evaluate systemic composability risks in DeFi lego stacks， and propose architectural patterns， testing， and permission-layers to prevent nested-call abuse.", "scenario": "A composable yield aggregator that chains multiple vaults suffers nested-call reentrancy when interacting with a new liquid-staking token， allowing an attacker to withdraw more shares than deposited and steal $60 million.", "factors_to_consider": ["Delegatecall vs. library contracts", "Pull vs. push payout models", "Reentrancy-guard best practices across nested calls", "Static-call simulations and fuzz testing depth", "Permissioned adapters or allow-lists for new strategy tokens"], "keywords": ["Reentrancy", "Delegatecall", "Composability risk", "Yield aggregator", "Nested calls"], "expected_insights": ["Layered vaults compound reentrancy surfaces when each assumes atomic accounting.", "Delegatecall inherits caller storage， worsening state-confusion.", "Static-call simulation， mutex guards， and per-vault withdraw limits mitigate risk.", "Permissioned onboarding of new strategies balances composability with security."], "scoring_criteria": [{"criterion": "Reentrancy-mechanism analysis", "points": 4, "key_points": ["Trace call-stack showing balance check before external call.", "Demonstrate delegatecall state-override."]}, {"criterion": "Composability-risk evaluation", "points": 3, "key_points": ["Discuss aggregator vs. monolith trade-offs.", "Quantify prior nested-vault exploits (eg. Pickle， Yearn-Curve)."]}, {"criterion": "Mitigation architecture", "points": 3, "key_points": ["Design contract-level mutex + withdrawal caps.", "Recommend continuous fuzzing with combinations of strategy adapters."]}], "total_possible": 10, "id": 24}
{"question_type": "short_answer", "instructions": "Analyse how timestamp manipulation affects PoS fairness and randomness， assess detection thresholds， propose protocol-level clock-drift bounds， and explore slashing or reward-decay mechanisms to deter such attacks without harming honest time variance.", "scenario": "A cartel controlling 20 % of stake on a major PoS chain repeatedly proposes blocks with slightly future timestamps， skewing randomness beacons used for validator selection and winning an outsized share of slots， extracting $5 million in MEV over two weeks.", "factors_to_consider": ["Block-timestamp rules and acceptable drift", "Randomness beacon derivation (RANDAO， VRF)", "MEV extraction tied to slot assignment", "Network-wide time-sync assumptions (NTP， clock skew)", "On-chain vs. off-chain detection and arbitration"], "keywords": ["Timestamp manipulation", "PoS fairness", "Randomness beacon", "Clock drift", "Slot assignment"], "expected_insights": ["Small forward-drift can bias VRF inputs， letting attackers tilt slot probability.", "Over-drift also risks fork-choice penalties; attackers find sweet-spot.", "Protocol-enforced ± bound， cumulative drift caps， and VRF post-processing reduce bias.", "Public time servers plus peer-observed timestamps enable slashing proof."], "scoring_criteria": [{"criterion": "Attack-bias analysis", "points": 4, "key_points": ["Quantify extra slot probability vs. drift seconds.", "Relate beacon equation to timestamp input."]}, {"criterion": "Detection & impact assessment", "points": 3, "key_points": ["Show observable indicators for peers and explorers.", "Estimate MEV gain compared to honest baseline."]}, {"criterion": "Protocol-level defences", "points": 3, "key_points": ["Suggest drift bounds， reward decay， or VRF delay randomisation.", "Outline evidence submission for timestamp slashing."]}], "total_possible": 10, "id": 25}
{"question_type": "short_answer", "instructions": "Evaluate censorship and contract-freeze risks in centrally managed stablecoins， examine liquidity and peg dynamics when large pools are frozen， and propose design or governance changes to minimise blacklist-induced contagion.", "scenario": "A USD-backed centralised stablecoin issuer mistakenly blacklists an address that holds 15 % of Curve’s 3pool liquidity， freezing $1.2 billion and causing the stablecoin’s on-chain price to spike to $1.08.", "factors_to_consider": ["Blacklist mechanics in ERC-20 tokens", "AMM invariant disruption and arbitrage paths", "Centralised issuer compliance policies", "Peg arbitrage vs. DAO reserve interventions", "Alternative architectures (multi-sig， judicial oversight， no burn-freeze)"], "keywords": ["Blacklist", "Stablecoin censorship", "Curve 3pool", "Peg premium", "Issuer governance"], "expected_insights": ["Freeze functions convert technical errors into systemic liquidity shocks.", "AMM curve imbalance leads to immediate peg premium or discount.", "Granular court-order whitelists， time-locked freezes， or opt-in KYC wrappers reduce blast-radius.", "Diversified collateral pools and on-chain FX desks buffer premiums."], "scoring_criteria": [{"criterion": "Censorship-risk analysis", "points": 3, "key_points": ["Explain token contract `transferFrom` block effect on pools.", "Compare with Tornado Cash sanctions spill-over."]}, {"criterion": "Market-contagion assessment", "points": 4, "key_points": ["Quantify premium and slippage across major DEXs and CEXs.", "Assess downstream liquidation risk in lending protocols."]}, {"criterion": "Governance & design mitigations", "points": 3, "key_points": ["Propose time-delay freezes， error-budget policies， or multi-jurisdiction trustees.", "Recommend insurance fund or automated circuit-breaker swaps."]}], "total_possible": 10, "id": 26}
{"question_type": "short_answer", "instructions": "Investigate cloud-HSM misconfiguration and insider-threat vectors in institutional custody， assess systemic risk to staking economies， and propose layered attestation， MPC-as-a-service， and regulatory audit frameworks.", "scenario": "A major institutional-custody provider’s cloud-hosted HSM environment is misconfigured， allowing insiders to export encrypted key shards; attackers reconstruct the deposit-contract signing key for a top-10 staking pool and redirect 45，000 ETH in validator rewards.", "factors_to_consider": ["Cloud-HSM trust boundaries and export policies", "MPC key-share isolation vs. HSM centralisation", "Staking-reward address rotation and monitoring", "SOC2 / ISO27001 vs. crypto-native transparency proofs", "Insurance and capital-reserve requirements"], "keywords": ["Custody breach", "HSM misconfiguration", "Insider threat", "Staking pool", "MPC"], "expected_insights": ["Cloud-tenant boundaries differ from on-prem; mis-set export flags nullify hardware trust.", "Large staking pools compound single-key risk across thousands of validators.", "MPC with server-side threshold signatures removes export-capability attack surface.", "Continuous attestation logs and mandatory dual-operator controls curb insider abuse."], "scoring_criteria": [{"criterion": "Breach mechanics analysis", "points": 5, "key_points": ["Detail misconfigured export-policy path.", "Show key-shard recombination method."]}, {"criterion": "Staking-ecosystem impact", "points": 3, "key_points": ["Quantify slash and missed-reward fallout.", "Discuss liquid-staking token de-peg knock-on."]}, {"criterion": "Custody-security reforms", "points": 2, "key_points": ["Recommend MPC migration and live attestation APIs.", "Suggest audit-standard updates and reserve capital buffers."]}], "total_possible": 10, "id": 27}
{"question_type": "short_answer", "instructions": "Analyze the impact of low-level cryptographic bugs on Web3 protocols， focusing on how such vulnerabilities can propagate through the ecosystem. Evaluate the effectiveness of current testing and verification methods， and propose comprehensive defense strategies that include prevention， detection， and mitigation measures. Consider the role of multi-language library diversity and coordinated disclosure in enhancing security.", "scenario": "A critical overflow bug in a widely-used Rust elliptic-curve library， integral to zk-rollups like Loopring and zkSync， allows adversaries to generate zero-knowledge proofs that validate incorrectly. This vulnerability leads to unauthorized withdrawals of 90 million DAI before detection. The bug affects the underlying field arithmetic operations， compromising the integrity of zk-SNARK proofs across multiple protocols.", "factors_to_consider": ["Field-arithmetic overflow checks and their implementation", "Diversity and redundancy in cryptographic library implementations", "Consistency and integrity checks in zk-SNARK proof systems", "Reproducibility of builds and continuous integration fuzz testing", "Effective communication and disclosure channels within the Web3 community"], "keywords": ["Elliptic curve vulnerability", "Overflow bug", "zk-SNARK", "Cryptographic library security", "Rust programming", "zk-rollups", "Web3 security"], "expected_insights": ["Understanding how a single library bug can undermine multiple protocols relying on it.", "The necessity of verifying both high-level and low-level cryptographic operations.", "The importance of differential testing across different language implementations.", "The role of upstream fuzzing， version control， and coordinated disclosure in preventing similar incidents."], "scoring_criteria": [{"criterion": "Vulnerability Analysis", "points": 3, "key_points": ["Detailed explanation of the overflow path in field operations.", "Connection to the acceptance of invalid zk-SNARK proofs."]}, {"criterion": "Ecosystem Impact Assessment", "points": 3, "key_points": ["Identification of affected zk-rollups and potential bridges.", "Comparison with historical cryptographic incidents."]}, {"criterion": "Security Recommendations", "points": 4, "key_points": ["Proposals for formal verification methods and cross-implementation testing.", "Strategies for emergency patch deployment and version management."]}], "total_possible": 10, "id": 28}
{"question_type": "short_answer", "instructions": "Conduct a comprehensive security assessment of the smart contract vulnerabilities， evaluate the effectiveness of implemented mitigation strategies， and propose a security hardening plan", "scenario": "Analyze a decentralized finance (DeFi) lending protocol that has experienced multiple exploit attempts including re-entrancy attacks during withdrawal functions and integer overflow in interest rate calculations", "factors_to_consider": ["Re-entrancy attack vectors in lending/borrowing functions", "Integer overflow/underflow risks in financial calculations", "Access control mechanisms for administrative functions", "Oracle manipulation vulnerabilities in price feeds", "Flash loan attack surface and circuit breaker implementations"], "keywords": ["Re-entrancy guard", "SafeMath library", "Checks-effects-interactions pattern", "Function modifiers", "State validation", "Oracle security"], "expected_insights": ["Re-entrancy attacks exploit external calls before state updates， requiring proper ordering of operations", "Integer overflow in financial calculations can lead to token minting or incorrect balance updates", "Proper access controls and time delays are essential for administrative functions", "Oracle price manipulation can amplify the impact of other vulnerabilities", "Comprehensive testing and formal verification are crucial for DeFi protocols"], "scoring_criteria": [{"criterion": "Vulnerability assessment", "points": 4, "key_points": ["Accurately identify re-entrancy attack vectors in contract functions", "Analyze integer overflow risks in mathematical operations", "Evaluate logic bugs in business logic implementation"]}, {"criterion": "Mitigation strategies", "points": 3, "key_points": ["Recommend appropriate re-entrancy guards and state management patterns", "Propose secure coding practices for financial calculations", "Suggest testing methodologies for vulnerability detection"]}, {"criterion": "Security implementation", "points": 3, "key_points": ["Design comprehensive security controls for identified vulnerabilities", "Evaluate trade-offs between security measures and protocol functionality", "Propose incident response procedures for exploit scenarios"]}], "total_possible": 10, "id": 29}
{"question_type": "short_answer", "instructions": "Develop a systematic approach to identify and prevent smart contract exploits， focusing on the most critical vulnerability classes that have historically affected multi-signature implementations", "scenario": "Design a security review framework for a multi-signature wallet smart contract that must prevent common exploit patterns including signature replay attacks， logic bugs in threshold validation， and arithmetic vulnerabilities in gas fee calculations", "factors_to_consider": ["Signature validation and replay attack prevention mechanisms", "Logic bugs in multi-signature threshold and approval workflows", "Arithmetic vulnerabilities in fee calculations and balance updates", "Front-running and transaction ordering dependencies", "Emergency procedures and recovery mechanisms"], "keywords": ["Signature replay protection", "Nonce management", "Threshold validation", "Gas griefing", "Transaction malleability", "Multi-signature security"], "expected_insights": ["Signature replay attacks can be prevented through proper nonce management and domain separation", "Logic bugs in threshold validation can allow unauthorized transactions or denial of service", "Arithmetic vulnerabilities in gas calculations can lead to fund drainage or transaction failures", "Multi-signature contracts require careful consideration of signing order and transaction dependencies", "Emergency recovery mechanisms must balance security with operational requirements"], "scoring_criteria": [{"criterion": "Threat analysis", "points": 3, "key_points": ["Identify specific exploit vectors targeting multi-signature implementations", "Analyze the root causes of signature replay and logic vulnerabilities", "Evaluate the impact of arithmetic bugs on wallet functionality"]}, {"criterion": "Prevention framework", "points": 4, "key_points": ["Design comprehensive security controls for identified threat vectors", "Propose systematic code review and testing procedures", "Integrate security measures into development lifecycle"]}, {"criterion": "Risk evaluation", "points": 3, "key_points": ["Assess the severity and likelihood of different exploit scenarios", "Evaluate the effectiveness of proposed security measures", "Consider operational impact of security implementations"]}], "total_possible": 10, "id": 30}
{"question_type": "short_answer", "instructions": "Evaluate the attack vectors， potential impacts， and defensive measures for consensus-level attacks focusing on hash power concentration. Add a quantitative analysis of the attack’s cost-effectiveness and the potential economic incentives for attackers. Incorporate specific attack scenarios such as selfish mining and block withholding for better context.", "scenario": "Analyze the security implications and mitigation strategies for a 51% attack scenario where a mining pool temporarily gains majority hash power control， leading to potential double-spending and transaction censorship. Include a quantitative analysis of the economic cost of sustaining such an attack， along with an assessment of specific attack scenarios like selfish mining and block withholding.", "factors_to_consider": ["Economic incentives and costs for sustained attacks， including resource requirements and cost-benefit analysis", "Detection mechanisms and network response protocols", "Impact on transaction finality and double-spending risks", "Long-term effects on network decentralization， trust， and governance", "Specific attack scenarios like selfish mining and block withholding"], "keywords": ["Hash power concentration", "Mining pool centralization", "Selfish mining", "Confirmation depth", "Chain reorganization", "Economic cost analysis"], "expected_insights": ["51% attacks are economically expensive but can enable double-spending and transaction censorship.", "Network monitoring can detect suspicious mining patterns， hash rate fluctuations， and abnormal mining pool behaviors.", "Increased confirmation requirements and longer settlement times can mitigate short-term attacks.", "Decentralized mining infrastructure and pool size limits reduce attack probability.", "A quantitative analysis of the attack cost versus reward strengthens understanding of attack feasibility."], "scoring_criteria": [{"criterion": "Attack vector analysis", "points": 4, "key_points": ["Identify specific attack mechanisms including selfish mining and block withholding.", "Analyze the economic feasibility and resource requirements for sustained attacks， using mathematical analysis."]}, {"criterion": "Impact assessment", "points": 3, "key_points": ["Evaluate the consequences for transaction finality， network security， and user trust.", "Assess broader ecosystem effects on user confidence， market stability， and network decentralization."]}, {"criterion": "Mitigation strategies", "points": 3, "key_points": ["Propose technical countermeasures including difficulty adjustments and monitoring systems.", "Recommend governance and incentive mechanisms to prevent hash power concentration， with a focus on economic disincentives."]}], "total_possible": 10, "id": 31}
{"question_type": "short_answer", "instructions": "Develop comprehensive response strategies for managing chain splits while maintaining network security and user protection", "scenario": "Design an incident response plan for a contentious hard fork that results in a persistent chain split with competing consensus rules", "factors_to_consider": ["Replay attack prevention and transaction safety measures", "Exchange and service provider coordination protocols", "Community communication and consensus building mechanisms", "Technical infrastructure requirements for supporting multiple chains"], "keywords": ["Hard fork", "Chain split", "Replay attacks", "Consensus rules", "Network partition"], "expected_insights": ["Chain splits create replay vulnerabilities requiring immediate transaction protection measures", "Coordinated response from exchanges and services is critical for user asset protection", "Clear communication protocols help maintain community cohesion during splits", "Technical preparations including client updates and monitoring tools are essential"], "scoring_criteria": [{"criterion": "Technical response planning", "points": 3, "key_points": ["Design replay attack prevention mechanisms and transaction safety protocols", "Outline client software updates and network monitoring requirements"]}, {"criterion": "Stakeholder coordination", "points": 4, "key_points": ["Develop communication strategies for exchanges， wallets， and service providers", "Create consensus-building mechanisms for resolving contentious splits"]}, {"criterion": "Risk mitigation", "points": 3, "key_points": ["Identify user protection measures during chain uncertainty", "Establish contingency plans for extended chain competition scenarios"]}], "total_possible": 10, "id": 32}
{"question_type": "short_answer", "instructions": "Evaluate the security vulnerabilities and attack vectors associated with BIP32/BIP44 hierarchical deterministic wallets， seed phrase generation， and key derivation mechanisms", "scenario": "Analyze the security implications of different private key derivation and storage methods in hierarchical deterministic (HD) wallets", "factors_to_consider": ["Seed phrase entropy and generation methods", "Master key compromise scenarios and impact", "Extended public key (xpub) exposure risks", "Derivation path security and address reuse patterns"], "keywords": ["BIP32", "BIP39", "Seed entropy", "Extended keys", "Key derivation", "Address derivation"], "expected_insights": ["Weak entropy sources during seed generation create predictable private keys vulnerable to brute force attacks", "Master private key compromise allows derivation of all child keys， creating single point of failure", "Extended public key exposure enables address derivation and transaction correlation attacks", "Hardened derivation paths provide additional security against parent key recovery from child keys", "Poor seed phrase storage practices expose users to social engineering and physical attacks"], "scoring_criteria": [{"criterion": "Vulnerability identification", "points": 4, "key_points": ["Identify specific vulnerabilities in HD wallet implementation", "Analyze entropy-related weaknesses in seed generation", "Assess risks of extended key exposure"]}, {"criterion": "Attack vector analysis", "points": 3, "key_points": ["Evaluate master key compromise scenarios", "Analyze derivation path exploitation methods", "Assess correlation and privacy attacks"]}, {"criterion": "Mitigation strategies", "points": 3, "key_points": ["Recommend secure seed generation practices", "Propose key isolation and hardening techniques", "Suggest operational security improvements"]}], "total_possible": 10, "id": 33}
{"question_type": "short_answer", "instructions": "Develop a threat model covering insider threats， cryptographic attacks， and operational security risks for a 2-of-3 multi-signature wallet managing high-value cryptocurrency transactions", "scenario": "Design a comprehensive threat model for a multi-signature wallet system used by a cryptocurrency exchange for hot wallet operations", "factors_to_consider": ["Multi-signature scheme vulnerabilities and implementation flaws", "Key ceremony and distributed key generation security", "Insider threat scenarios and privilege escalation", "Hardware security module (HSM) integration and API security"], "keywords": ["Multi-signature", "Threshold signatures", "Key ceremony", "HSM security", "Insider threats", "API security"], "expected_insights": ["Insider collusion between two signers can compromise the entire multi-sig wallet", "Weak key generation ceremonies may produce predictable or related keys", "HSM tampering and side-channel attacks can extract private keys", "API vulnerabilities in signing services can bypass multi-signature protections", "Social engineering attacks targeting multiple signers simultaneously increase success probability", "Operational procedures for key rotation and emergency recovery create additional attack surfaces"], "scoring_criteria": [{"criterion": "Threat identification", "points": 3, "key_points": ["Identify insider threat scenarios and collusion attacks", "Analyze cryptographic implementation vulnerabilities", "Assess operational security threats"]}, {"criterion": "Risk evaluation", "points": 4, "key_points": ["Evaluate likelihood and impact of identified threats", "Analyze attack chains and escalation paths", "Assess effectiveness of multi-signature protections against different threat actors"]}, {"criterion": "Security controls", "points": 3, "key_points": ["Recommend detection and monitoring mechanisms", "Propose operational security improvements", "Suggest incident response procedures for key compromise"]}], "total_possible": 10, "id": 34}
{"question_type": "short_answer", "instructions": "Evaluate how these three defense mechanisms protect against sandwich attacks， front-running， and back-running， considering their implementation challenges and potential bypasses", "scenario": "Analyze the effectiveness of commit-reveal schemes， time-locked transactions， and private mempools in defending against different types of MEV attacks", "factors_to_consider": ["Protection effectiveness against specific MEV attack vectors", "Implementation complexity and gas cost implications", "User experience impact and adoption barriers", "Potential for sophisticated attackers to circumvent defenses"], "keywords": ["Commit-reveal schemes", "Time-locked transactions", "Private mempools", "Sandwich attacks", "Front-running protection"], "expected_insights": ["Commit-reveal schemes provide strong protection against front-running but require two-phase transactions", "Time-locked transactions can prevent immediate MEV extraction but may create delayed attack opportunities", "Private mempools reduce visibility but concentrate power in operators and may face timing attacks", "Sophisticated attackers may use cross-chain arbitrage or validator collusion to bypass single-layer defenses"], "scoring_criteria": [{"criterion": "Defense mechanism analysis", "points": 4, "key_points": ["Accurately explain how each defense mechanism operates technically", "Identify specific MEV attack types each mechanism effectively counters"]}, {"criterion": "Vulnerability assessment", "points": 3, "key_points": ["Analyze potential bypasses and limitations of each defense", "Evaluate resilience against sophisticated attacker strategies"]}, {"criterion": "Implementation trade-offs", "points": 3, "key_points": ["Assess practical deployment challenges and costs", "Balance security effectiveness against usability and adoption concerns"]}], "total_possible": 10, "id": 35}
{"question_type": "short_answer", "instructions": "Evaluate the security guarantees， trust assumptions， and potential attack vectors for each MEV protection approach in production blockchain environments", "scenario": "Compare the MEV protection capabilities of Flashbots Protect， fair sequencing services， and threshold encryption approaches for transaction ordering", "factors_to_consider": ["Trust model and centralization risks", "Resistance to validator collusion and timing attacks", "Cryptographic security assumptions and implementation risks", "Economic incentive alignment and game-theoretic considerations"], "keywords": ["Flashbots Protect", "Fair sequencing services", "Threshold encryption", "Validator collusion", "Transaction ordering"], "expected_insights": ["Flashbots Protect relies on trusted relay operators but provides immediate usability", "Fair sequencing services distribute trust but face coordination and censorship challenges", "Threshold encryption provides cryptographic guarantees but requires complex key management", "All approaches face trade-offs between decentralization， performance， and security guarantees"], "scoring_criteria": [{"criterion": "Trust model evaluation", "points": 3, "key_points": ["Analyze centralization risks and trust assumptions for each approach", "Identify single points of failure and potential abuse scenarios"]}, {"criterion": "Attack vector analysis", "points": 4, "key_points": ["Evaluate resistance to validator collusion and timing attacks", "Assess cryptographic security and implementation vulnerabilities"]}, {"criterion": "Practical deployment assessment", "points": 3, "key_points": ["Compare real-world performance and adoption challenges", "Evaluate economic incentive alignment and long-term sustainability"]}], "total_possible": 10, "id": 36}
{"question_type": "short_answer", "instructions": "Compare formal verification methods with conventional audit approaches for detecting and preventing reentrancy attacks in smart contracts， using real-world DeFi security incidents as reference points", "scenario": "Analyze the effectiveness of formal verification versus traditional testing for a DeFi lending protocol that has experienced multiple reentrancy vulnerabilities", "factors_to_consider": ["Mathematical proof capabilities versus empirical testing limitations", "Coverage of state space and edge cases in complex DeFi interactions", "Cost-benefit analysis of formal verification implementation", "Integration challenges with existing development and audit workflows", "Effectiveness against historically documented reentrancy patterns"], "keywords": ["Formal verification", "Model checking", "Theorem proving", "Reentrancy guards", "State invariants", "Temporal logic"], "expected_insights": ["Formal verification provides mathematical guarantees about specific properties but requires precise specification", "Traditional testing may miss complex interaction patterns that formal methods can systematically explore", "Formal verification tools like Certora and TLA+ can model state transitions but have scalability limitations", "Hybrid approaches combining formal verification with fuzzing provide comprehensive coverage", "Implementation overhead of formal verification must be balanced against critical system requirements"], "scoring_criteria": [{"criterion": "Verification methodology comparison", "points": 4, "key_points": ["Accurately compare formal verification techniques with traditional audit methods", "Demonstrate understanding of mathematical proof systems versus empirical testing"]}, {"criterion": "Reentrancy attack analysis", "points": 3, "key_points": ["Analyze how different verification approaches detect reentrancy vulnerabilities", "Reference documented reentrancy patterns and prevention mechanisms"]}, {"criterion": "Implementation feasibility", "points": 3, "key_points": ["Evaluate practical challenges of integrating formal verification into development workflows", "Assess cost-benefit trade-offs for different project scales and risk profiles"]}], "total_possible": 10, "id": 37}
{"question_type": "short_answer", "instructions": "Develop a systematic fuzzing approach that addresses the unique security challenges of cross-chain bridges， incorporating lessons from documented bridge attacks and considering both on-chain and off-chain components", "scenario": "Design a comprehensive fuzzing strategy for a cross-chain bridge protocol， considering the multi-layered attack surface and recent bridge exploit patterns", "factors_to_consider": ["Multi-chain state synchronization and consensus mechanisms", "Oracle manipulation and price feed vulnerabilities", "Message passing protocol integrity and validation", "Economic incentive structures and game-theoretic attack vectors", "Integration of static analysis with dynamic fuzzing techniques"], "keywords": ["Property-based testing", "Invariant fuzzing", "Consensus fuzzing", "Oracle manipulation", "State space exploration", "Symbolic execution"], "expected_insights": ["Cross-chain bridges require fuzzing of both individual chain logic and inter-chain communication protocols", "Property-based testing can validate bridge invariants like conservation of total supply across chains", "Fuzzing should target oracle dependencies and external data source manipulation vectors", "Economic fuzzing models can test incentive mechanisms and potential MEV exploitation scenarios", "Differential fuzzing between chain implementations can reveal consensus-related vulnerabilities"], "scoring_criteria": [{"criterion": "Fuzzing architecture design", "points": 3, "key_points": ["Design comprehensive fuzzing strategy covering multi-chain interactions", "Address both deterministic and probabilistic attack vectors"]}, {"criterion": "Bridge-specific vulnerability targeting", "points": 4, "key_points": ["Identify fuzzing approaches for documented bridge attack patterns", "Incorporate oracle manipulation and consensus-related fuzzing techniques"]}, {"criterion": "Testing integration methodology", "points": 3, "key_points": ["Combine fuzzing with static analysis and formal verification approaches", "Establish metrics for measuring fuzzing effectiveness and coverage"]}], "total_possible": 10, "id": 38}
{"question_type": "short_answer", "instructions": "Evaluate how different stakeholders (protocol team， users， auditors) should coordinate during a security incident， focusing on response timeline， damage mitigation， and lessons learned documentation", "scenario": "Analyze the incident response effectiveness during a major DeFi protocol exploit， comparing the immediate response actions， communication strategies， and recovery mechanisms employed", "factors_to_consider": ["Emergency response procedures and timeline", "Communication protocols with users and community", "Technical mitigation strategies (pause mechanisms， upgrades)", "Post-incident analysis and vulnerability disclosure processes", "Coordination with exchanges， bridges， and other protocols"], "keywords": ["Emergency response", "Circuit breakers", "Incident coordination", "Post-mortem analysis", "Vulnerability disclosure"], "expected_insights": ["Speed of response is critical - delays can exponentially increase damage", "Clear communication channels prevent panic and misinformation spread", "Technical safeguards like pause functions are essential for damage control", "Transparent post-mortems build trust and improve ecosystem security", "Cross-protocol coordination is vital for systemic risk management"], "scoring_criteria": [{"criterion": "Response timeline analysis", "points": 4, "key_points": ["Evaluate critical decision points and timing in incident response", "Assess effectiveness of immediate containment measures"]}, {"criterion": "Stakeholder coordination", "points": 3, "key_points": ["Analyze communication effectiveness across different parties", "Evaluate coordination mechanisms between protocol teams and external stakeholders"]}, {"criterion": "Recovery and learning", "points": 3, "key_points": ["Assess post-incident recovery strategies and their effectiveness", "Evaluate quality of lessons learned and process improvements implemented"]}], "total_possible": 10, "id": 39}
{"question_type": "short_answer", "instructions": "Create a bug bounty framework that balances incentive alignment， responsible disclosure， and continuous security improvement while addressing the unique challenges of cross-chain protocols", "scenario": "Design a comprehensive bug bounty program for a multi-chain DeFi protocol， considering scope definition， reward structures， and post-discovery processes", "factors_to_consider": ["Vulnerability classification and severity scoring systems", "Reward tiers based on impact and exploitability", "Scope boundaries and excluded vulnerability types", "Disclosure timelines and coordination processes", "Integration with existing security practices and audit cycles"], "keywords": ["Vulnerability severity scoring", "Responsible disclosure", "Incentive alignment", "Security researcher engagement", "Continuous security improvement"], "expected_insights": ["Reward structures must reflect actual business impact and fix complexity", "Clear scope definitions prevent disputes and encourage quality submissions", "Disclosure timelines must balance security needs with researcher recognition", "Integration with development cycles ensures timely fixes and reduces reintroduction risks", "Community engagement beyond monetary rewards builds long-term security partnerships"], "scoring_criteria": [{"criterion": "Program structure design", "points": 3, "key_points": ["Design comprehensive vulnerability classification and reward systems", "Define clear program scope and exclusions appropriate for multi-chain protocols"]}, {"criterion": "Incentive optimization", "points": 4, "key_points": ["Analyze reward structures for effectiveness in attracting quality researchers", "Balance cost-effectiveness with adequate motivation for security research"]}, {"criterion": "Process integration", "points": 3, "key_points": ["Design workflows that integrate bug bounty findings with development and security processes", "Establish metrics for measuring program success and continuous improvement"]}], "total_possible": 10, "id": 40}
